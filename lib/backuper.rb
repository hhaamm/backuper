class Backuper
  def initialize(config)
    @backups = config[:backups]
    @rotations = config[:rotations]
    @remote_target = config[:remote_target]
    @remote_port = config[:remote_port]
    @local_target = config[:local_target]
    @mail_target = config[:mail_target]
    @date_format = config[:date_format] ? config[:date_format] : '%Y_%m_%d'
    @stop_on_fail = config[:stop_on_fail] === nil ? false : config[:stop_on_fail]
    @attachment_extension = config[:attachment_extension]
  end

  def run
    @tmp_folder = File.join(TMP_FOLDER, random_string)
    check_folders

    @backups.each do |backup|
      backup.set_config tmp_folder: @tmp_folder, local_target: @local_target, remote_target: @remote_target, mail_target: @mail_target
      begin
        backup.run
      rescue Exception => e
        puts e
        puts "Canceling backup #{backup.name}"
        
        if @stop_on_fail
          puts "Canceling whole backup"
          raise e
        end
      end
    end

    # some mail servers doesn't accept .tar.gz files, so the user can use another extension. 
    extension = @attachment_extension ? @attachment_extension : '.tar.gz'

    filename = File.join(TMP_FOLDER, Time.now.strftime(@date_format)+extension)
    puts "Filename: #{filename}"
    system("tar -cf #{filename} #{@tmp_folder}")

    if @local_target 
        FileUtils.mv filename, @local_target
        rotate_files
    end

    if @remote_target
      remote_port = @remote_port ? @remote_port : 22
      command = "scp -P #{@remote_port} #{filename} #{@remote_target}"
      puts "Executing... "+command
      system(command)
    end

    if @mail_target
      require 'mail'

      mail_target = @mail_target
      mail_target = 'ham1988@gmail.com'
      mail = Mail.new do
        from    'backup@backuper.com'
        to       mail_target
        subject 'Backup available'
        body    "This is an automatic mail generated by backuper."        
        add_file filename
      end

      mail.delivery_method :sendmail, :arguments => '-i'
      mail.deliver
    end

    # deleting temp data
    FileUtils.rm_rf @tmp_folder
    if File.exists?(filename)
      File.unlink filename
    end
  end

  def check_config
    # I'll probably should implement something here, right?
  end

  def rotate_files
    if !@rotations
      return
    end

    files = Dir[File.join(@local_target, '**', '*')].sort

    for i in (@rotations..(files.length-1)) do
      File.delete(files[i])
    end
  end

  def check_folders
    Dir.mkdir @tmp_folder
    if @local_target and !Dir.exists? @local_target
      Dir.mkdir @local_target
    end
  end

  private
  def random_string
    (0...20).map{ ('a'..'z').to_a[rand(26)] }.join
  end
end

# monkey patch
#module Mail
#  class ::Sendmail
#    def initialize(values) 
#      puts values
#      throw "sdfsd"
#      self.settings = { :location => '/usr/sbin/sendmail', :arguments => '-i'}.merge(values)
#    end
# end
#end
